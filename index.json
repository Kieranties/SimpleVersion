{
  "articles/configuration.html": {
    "href": "articles/configuration.html",
    "title": "Configuration",
    "keywords": "Configuration SimpleVersion reads the .simpleversion.json from the root of your git repository. This file provides various configuration options. Version The version property allows you to specify the base version to be generated. You may set the property with a version string that consists of one to four dot separated digits. All of the following are accepted values: \"version\" : \"1\" \"version\" : \"1.2\" \"version\" : \"1.2.3\" \"version\" : \"1.2.3.4\" Label The label property specifies an array of labels to be included in the version. \"label\" : [] \"label\" : [\"alpha1\"] \"label\" : [\"alpha1\", \"test\"] Note By specifying values in the label, the version will be returned as a pre-release version. If there is a pre-release label, the height will be appended to label. Metadata The metadata property specifies an array of values to be included as metadata in the final version. \"metadata\" : [] \"metadata\" : [\"demo\"] \"metadata\" : [\"demo\", \"sprint1\"] Warning Currently, only Semver2 format supports metadata . Offset Sometimes you may need to adjust the base value of the height. This could be when migrating from a previous versioning pattern, if a number of commits should be discounted, or any other reason. Specify the offset as a numeric value to impact the base value of the height: \"offset\" : -5 \"offset\" : 4 Branches The branches section allows for branch specific rules and configuration to be applied based on the branch currently being built. Release release allows for a list of regular expressions to be defined where each may match to the current branch being built. If the current branch does not match any of the expressions it will have the short sha of the current commit added to the label property prefixed with c (for commit). { \"version\": \"0.1.0\", \"label\": [ \"alpha2\" ], \"branches\": { \"release\": [ \"^refs/heads/master$\", \"^refs/heads/preview/.+$\", \"^refs/heads/release/.+$\" ] } } In the above example, any branch called master , starting with preview/ or starting with release/ will not have the short sha appended, generating a Semver2 version of 0.1.0-alpha2.5 when there are five commits. All other branches will append the short sha, generating a Semver2 version of 0.1.0-alpha2.5.c903782 when there are five commits and the sha begins with 903782 . Note Release branch configuration provides a simple way to identify what may be publicly shipped. If the version has a label containing the sha, you probably don't want it released. You can enable all branches to be release branches using the regular expression .* . Overrides Overrides allow for certain elements of the version to be reconfigured based on the branch being built. Overrides are matched by a regular expression where only the first match (if found) is used. { \"version\": \"0.2.0\", \"label\": [ \"alpha1\" ], \"branches\": { \"release\": [ \"^refs/heads/master$\", \"^refs/heads/preview/.+$\", \"^refs/heads/release/.+$\" ], \"overrides\": [ { \"match\": \"^refs/heads/feature/.+$\", \"metadata\": [ \"{shortbranchname}\" ] }, { \"match\": \"^refs/heads/release/.+$\", \"label\": [], \"metadata\": [ \"*\" ] } ] } } In the above example, any branch starting with feature/ will add the branches shortname as metadata to the generated version. E.g. feature/testing will create a version of 0.2.0-alpha1.5.c903782+featuretesting when there are five commits and the sha begins with 903782 . Additionally, any branch beginning with release/ will strip the release label and have the height added into the metadata. Warning Overrides will allow the same commit to be built with different versions depending on the current branch. Override Properties Override configuration has access to the following properties Key Type Required Description match string true Branches with a canonical branch name matching this regular expression will be overridden label string array false Overrides label from the base configuration prefixlabel string array false Prefixes the base configuration label with the given values postfixlabel string array false Postfixes the base configuration label with the given values insertlabel int/string dictionary false Inserts the given values into the base label at the index specified metadata string array false Overrides metadata from the base configuration prefixmetadata string array false Prefixes the base configuration metadata with the given values postfixmetadata string array false Postfixes the base configuration metadata with the given values insertmetadata int/string dictionary false Inserts the given values into the base metadata at the index specified Replacement Tokens SimpleVersion allows specific tokens to be used in some properties to allow substitution of values during invocation. The following tokens may be used: Name Token Where Description Height * version , label , metadata Inserts the calculated height Branch Name {branchname} label , metadata Inserts the canonical branch name, stripped of non-alphanumeric characters Short Branch Name {shortbranchname} label , metadata Inserts the friendly branch name, stripped of non-alphanumeric characters Branch Name Suffix {branchnamesuffix} label , metadata Inserts the last segment of the canonical name of a branch Short Sha {shortsha} label , metadata Inserts the first seven characters of the commit sha, prefixed with c (for commit) Pull-Request Id {pr} label , metadata Inserts the id of the pull-request (or 0 by default)"
  },
  "articles/environments.html": {
    "href": "articles/environments.html",
    "title": "Environments",
    "keywords": "Environments SimpleVersion attempts to identify git information from the local environment. When running on Continuous Integration (CI) systems you may need to prepare the environment to cater for the CI systems specific approach to builds. Azure Devops Azure Devops is identified as the build environment when the environment variable TF_BUILD is set. When identified, the canonical and friendly branch names are derived from the BUILD_SOURCEBRANCH environment variable. Fallback Environment For all environments, the build branch can be overridden by setting simpleversion.sourcebranch to the full canonical branch name . When this variable is set it will override the resolution from any CI system as well as the local repository branch name. TeamCity When building with TeamCity you can lift the branch name of the build to an environment variable by doing the following: Open your build configuration, and select Parameters Add a new paramter called env.simpleversion.sourcebranch Set the value to %teamcity.build.vcs.branch.{vcsid}% where {vcsid} is the VCS Root of your repo"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction",
    "keywords": "Introduction SimpleVersion is available as a cross-platform dotnet tool and core libraries for direct consumption in a project. To get a better understanding of the values returned from invoking SimpleVersion see the results documentation . Dotnet Tool The latest version of the dotnet tool can be found on nuget.org. You can install SimpleVersion.Tool using the dotnet cli : # Installs the latest version as a global tool dotnet tool install SimpleVersion.Tool -g # Or a specific version dotnet tool install SimpleVersion.Tool -g --version 0.3.0-alpha1.2 Once installed, you can invoke SimpleVersion in your favorite shell, optionally passing the path to your repository (defaults to current working directory) PS c:\\MyRepo> simpleversion PS c:\\> simpleversion ./MyRepo Local Tools Beginning with net core 3.0, you can install tools locally to a project. Doing so enables persistance of the tool version along side the code base. Run the following from the root of your project to install and run as a local tool: # Create a tool manifest PS c:\\MyRepo> dotnet new tool-manifest # Add the tool PS c:\\MyRepo> dotnet tool install SimpleVersion.Tool # Or a specific version PS c:\\MyRepo> dotnet tool install SimpleVersion.Tool --version 0.3.0-alpha1.2 Local tools can be invoked after they have been restored: # Restore PS c:\\MyRepo> dotnet tool restore # Run PS c:\\MyRepo> dotnet simpleversion Usage in Cake The dotnet tool can be integrated into a Cake build script. This makes use of the Cake.DotNetTool.Module to enable installing SimpleVersion.Tool . You will need to run .\\build.ps1 --bootstrap prior to running .\\build.ps1 to ensure correct installation of the tool. A simple build.cake can invoke the SimpleVersion : // Install dotnet core tool module #module nuget:?package=Cake.DotNetTool.Module&version=0.4.0 // Install SimpleVersion dotnet tool #tool dotnet:?package=SimpleVersion.Tool&version=0.3.0 // Install newtonsoft to parse result #addin nuget:?package=Newtonsoft.Json&version=12.0.3 // Import newtonsoft namespace for parsing using Newtonsoft.Json.Linq; ////////////////////////////////////////////////////////////////////// // ARGUMENTS ////////////////////////////////////////////////////////////////////// var target = Argument(\"target\", \"Default\"); var versionFormat = Argument(\"versionFormat\", \"Semver1\"); ////////////////////////////////////////////////////////////////////// // TASKS ////////////////////////////////////////////////////////////////////// Task(\"Build\") .Does(() => { // Call SimpleVersion to get version information StartProcess( Context.Tools.Resolve(\"simpleversion.exe\"), new ProcessSettings{ RedirectStandardOutput = true }, out var simpleVersionOut // capture output for parsing ); // Parse json result dynamic simpleVersion = JObject.Parse(string.Join(\"\", simpleVersionOut)); // Display version - Access formats dictionary or other properties Information(simpleVersion.Formats[versionFormat]); }); ////////////////////////////////////////////////////////////////////// // TASK TARGETS ////////////////////////////////////////////////////////////////////// Task(\"Default\") .IsDependentOn(\"Build\"); ////////////////////////////////////////////////////////////////////// // EXECUTION ////////////////////////////////////////////////////////////////////// RunTarget(target); Which can then be invoked as: PS .\\build.ps1 --bootstrap; .\\build.ps1 Preparing to run build script... Running build script... Preparing to run build script... Running build script... ======================================== Build ======================================== 0.3.0-alpha1-0002-c6c70600 ======================================== Default ======================================== Task Duration -------------------------------------------------- Build 00:00:00.3256116 -------------------------------------------------- Total: 00:00:00.3304598 You change the arguments passed to SimpleVersion using the ProcessSettings class."
  },
  "articles/results.html": {
    "href": "articles/results.html",
    "title": "Results",
    "keywords": "Results How you handle the results of SimpleVersion will vary based on how you are invoking the tool. However, all implementations return the same results object. The following is an example from invoking the command line tool: { \"Version\": \"0.1.0\", \"Major\": 0, \"Minor\": 1, \"Patch\": 0, \"Revision\": 0, \"Height\": 18, \"HeightPadded\": \"0018\", \"Sha\": \"ebc8f22ae83bfa3c1e36d6bf70c2a383ae30c9dd\", \"Sha7\": \"ebc8f22\", \"CanonicalBranchName\": \"refs/heads/preview/test\", \"BranchName\": \"preview/test\", \"Formats\": { \"Semver1\": \"0.1.0-alpha2-0018\", \"Semver2\": \"0.1.0-alpha2.18\" } } Properties Name Type Value Details Version int . int . int (. int ) The Major.Minor.Patch version value. If Revision was provided in the original format, it will also be included. Major int The Major value reported in the Version string Minor int The Minor value reported in the Version string Patch int The Patch value reported in the Version string Revision int The Revision value. Always 0 even if not included in the Version string Height int The calculated height HeightPadded int The calculated height padded to four digits Sha string The sha of the current commit at the time of invocation Sha7 string The sha of the current commit at the time of invocation, shortened to 7 characters BranchName string The checked out branch at the time of invocation CanonicalBranchName string The full canonical name of the checked out branch at the time of invocation Formats Formats are specified combinations of the result values that follow a specification. Currently only built in formats are supported, however custom formats will be supported in a future version. Name Type Value Details Semver1 string The full version string following the Semver1 spec Semver2 string The full version string following the Semver2 spec"
  },
  "index.html": {
    "href": "index.html",
    "title": "SimpleVersion",
    "keywords": "SimpleVersion SimpleVersion aims to simplify how you version the artifacts of your git repository. Using SimpleVersion you can generate consistent, expected version numbers for each commit in your repository, based on a few simple configuration options. SimpleVersion uses some base configuration and the 'height' of your commit history to generate a version. Height is calculated as the number of commits since the last change to the .simpleversion.json file . Important You must commit changes to the file for SimpleVersion to identify the change. Future versions of SimpleVersion aim to provide: Validation of the version based on branch configuration Custom formatting configuration to support custom versioning schemes Override logic with custom token replacement syntax and more! Why? SimpleVersion borrows ideas from other excellent versioning tools, notably: GitVersion and NerdBank.GitVersioning . These tools also deliver the ability to version your repository based on the commits but work in a different manner: GitVersion relies heavily on branch names, merge messages and more. I have found this can sometimes cause issues without extreme management of best practices. Nerdbank is an excellent tool that removes many of the issues I ran into with GitVersion, however is more limited in scope for custom labelling formats. Usage To use SimpleVersion, you simply need to add a .simpleversion.json file to the root of your git repository and commit it. Configuration { \"version\": \"0.1.0\", \"label\": [ \"alpha2\" ], \"branches\": { \"release\": [ \"^refs/heads/master$\", \"^refs/heads/preview/.+$\", \"^refs/heads/release/.+$\" ] } } The above configuration tells SimpleVersion that the version will be 0.1.0 and should have a release label of alpha2 . As there is a pre-release label, the height will be appended to label, generating a Semver2 version 0.1.0-alpha2.3 if there were three commits since the version was last set. For further guidance, see the configuration documentation . Resetting The Height The height will be reset to 0 when SimpleVersion detects a change to either the version or the label in the .simpleversion.json file."
  }
}