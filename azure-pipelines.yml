# Build pipeline for Azure Devops
trigger:
  branches:
    include:
    - master
    - release/*
  paths:
    exclude:
    - docs/*
    - .github/*
    - README.md

pr:
- master
- release/*

variables:
  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: false
  Configuration: Release
  ArtifactsDir: $(Build.ArtifactStagingDirectory)
  LocalFeed: https://pkgs.dev.azure.com/Kieranties/_packaging/SimpleVersion/nuget/v3/index.json

jobs:
- job: Windows
  pool:
    vmImage: vs2017-win2016
  steps:

  # Install nuget
  - task: NuGetToolInstaller@0
    displayName: 'Prepare: Install NuGet'

  # Install previous release
  - task: NuGetCommand@2
    displayName: 'Prepare: Install SimpleVersion'
    inputs:
      command: custom
      arguments: 'install SimpleVersion.Command -Pre -Source $(LocalFeed)'

  # Calculate the version and set variables
  - powershell: |
      $result = .\SimpleVersion.*\tools\SimpleVersion.exe
      Write-Output $result
      $fullVersion = ($result | ConvertFrom-Json).Formats.Semver2
      Write-Output "##vso[build.updatebuildnumber]$fullVersion"
      Write-Output "##vso[task.setvariable variable=Version;]$fullVersion"
    displayName: 'Prepare: Set version information'

  # Build
  - powershell: ./build.ps1 -BuildDocs -ArtifactsPath $(ArtifactsDir)
    displayName: 'Build'

  # Publish test results
  - task: PublishTestResults@2
    displayName: 'Tests: Publish unit tests'
    continueOnError: true
    inputs:
      testRunTitle: Unit Tests
      testRunner: vstest
      testResultsFiles: '$(ArtifactsDir)/**/*.trx'

  # Publish coverage
  - task: PublishCodeCoverageResults@1
    displayName: "Tests: Publish unit test coverage"
    continueOnError: true
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(ArtifactsDir)/**/*.cobertura.xml'

  # TODO - Renable integration tests. Currently fail as environment variables
  # are always collected, so branch always maps to current repo branch being built

  # Run integration tests
  #- task: richardfennellBM.BM-VSTS-PesterRunner-Task.Pester-Task.Pester@8
  #  displayName: "Test: Integration"
  #  inputs:
  #    scriptFolder: '@{Path=''$(System.DefaultWorkingDirectory)\integration\*.Command.Tests.ps1''; Parameters=@{ Artifacts=''$(Build.ArtifactStagingDirectory)/distributables''}}'
  #    resultsFile: '$(Build.ArtifactStagingDirectory)\Pester.Tests.XML'

  # Publish integration tests
  #- task: PublishTestResults@2
  #  displayName: "Artifacts: Publish Integration Tests"
  #  condition: succeededOrFailed()
  #  inputs:
  #    testResultsFormat: NUnit
  #    testResultsFiles: $(Build.ArtifactStagingDirectory)\Pester.Tests.xml
  #    testRunTitle: "Integration Tests"

  # Quality check the build
  - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
    displayName: 'Checks: Quality'
    inputs:
      checkWarnings: true
      showStatistics: true
      checkCoverage: true
      coverageFailOption: fixed
      coverageThreshold: 90
      coverageType: branches

  # Handle artifacts
  - task: PublishBuildArtifacts@1
    displayName: "Artifacts: Publish"
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))
    inputs:
      PathtoPublish: $(ArtifactsDir)
      ArtifactName: Artifacts
      ArtifactType: Container

  - task: NuGetCommand@2
    displayName: "Artifacts: Push Packages"
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))
    inputs:
      command: push
      packagesToPush: $(ArtifactsDir)/**/*.nupkg
      nuGetFeedType: internal
      publishVstsFeed: SimpleVersion
      feedsToUse: nuget.config
