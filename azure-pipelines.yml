# Build pipeline for Azure Devops
trigger:
  branches:
    include:
    - master
    - release/*
  paths:
    exclude:
    - .github/*
    - README.md

pr:
- master
- release/*

variables:
  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  Configuration: Release
  ArtifactsPath: $(Build.ArtifactStagingDirectory)
  disable.coverage.autogenerate: true

jobs:
- job: 'build_test_pack'
  displayName: "Core Build"
  pool:
    vmImage: windows-latest

  steps:
  # Build
  - pwsh: ./build.ps1 -ArtifactsPath $(ArtifactsPath) -Configuration $(Configuration)
    displayName: 'Build and Test'

  # Publish test results
  - task: PublishTestResults@2
    displayName: 'Tests: Publish unit tests'
    condition: succeededOrFailed()
    inputs:
      testRunTitle: Unit Tests
      testResultsFormat: VSTest
      testResultsFiles: '$(ArtifactsPath)/**/*.trx'

  # Publish coverage
  - task: PublishCodeCoverageResults@1
    displayName: "Tests: Publish unit test coverage"
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(ArtifactsPath)/**/*.cobertura.xml'
      reportDirectory: '$(ArtifactsPath)/tests/coveragereport'

  # Quality check the build
  - task: BuildQualityChecks@6
    displayName: 'Checks: Quality'
    inputs:
      checkWarnings: true
      warningFailOption: 'fixed'
      warningThreshold: '0'
      showStatistics: true
      checkCoverage: true
      coverageFailOption: 'fixed'
      coverageType: 'branches'
      coverageThreshold: '90'

  # Handle artifacts
  - publish: $(ArtifactsPath)/docs/site
    displayName: "Artifacts: Publish Docs"
    condition: succeeded()
    artifact: docs

  - publish: $(ArtifactsPath)/dist
    displayName: "Artifacts: Publish Dist"
    condition: succeeded()
    artifact: dist

  - task: NuGetCommand@2
    displayName: "Artifacts: Push Packages"
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))
    inputs:
      command: push
      packagesToPush: $(ArtifactsPath)/**/*.nupkg
      nuGetFeedType: internal
      publishVstsFeed: SimpleVersion
      feedsToUse: nuget.config

- job: 'acceptance'
  displayName: "Acceptance Test"
  dependsOn: build_test_pack
  pool:
    vmImage: ubuntu-latest

  steps:
  - download: current
    artifact: dist

  # Run acceptance tests
  - pwsh: ./acceptance.ps1 -ArtifactsPath $(Pipeline.Workspace)
    displayName: 'Tests: Run acceptance tests'

  # Publish acceptance results
  - task: PublishTestResults@2
    displayName: 'Tests: Publish acceptance tests'
    condition: succeededOrFailed()
    inputs:
      testRunTitle: Acceptance Tests
      testResultsFormat: NUnit
      testResultsFiles: '$(Pipeline.Workspace)/**/acceptanceResults.xml'
      failTaskOnFailedTests: true


# TODO - Jobs for Integration testing